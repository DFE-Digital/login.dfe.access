const repository = require('../../../src/infrastructure/data/organisationsRepository');
const { removeUserServiceAndAssociations, removeAllUserServiceRequests, removeAllUserServiceRoles, removeAllUserServiceIdentifiers, removeUserService } = require('../../../src/infrastructure/data');
let { sequelize } = require('sequelize');

jest.mock('./../../../src/infrastructure/data/organisationsRepository', () => require('./mockOrganisationsRepository').mockRepository());

sequelize = new sequelize('sqlite::memory:');
jest.mock('sequelize', () => {
  const mSequelize = {
    transaction: jest.fn(),
  };
  return {
    sequelize: jest.fn(() => mSequelize),
  };
});

const uid = 'user-1';
const sid = 'service-1';
const oid = 'organisation-1';

describe('When removing a user service in repository', () => {
  beforeEach(() => {
    repository.mockResetAll();
  });

  it('then it should upsert the record', async () => {
    await removeUserServiceAndAssociations(uid, sid, oid);

    expect(removeAllUserServiceRequests).toHaveBeenCalledTimes(1);
    expect(removeAllUserServiceRoles).toHaveBeenCalledTimes(1);
    expect(removeAllUserServiceIdentifiers).toHaveBeenCalledTimes(1);
    expect(removeUserService).toHaveBeenCalledTimes(1);
  });
});
